{
  "active": true,
  "connections": {
    "Google Sheets Trigger": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cadastrando na Audiência": {
      "main": [
        [
          {
            "node": "enviar fluxo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Formatando Nome e Telefone",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatando Nome e Telefone": {
      "main": [
        [
          {
            "node": "Cadastrando na Audiência",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-01-09T09:38:03.941Z",
  "id": "gQsX5aJUgaR1RpHi",
  "meta": null,
  "name": "recebe dados do form (teste leads)",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "documentId": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/1Wvy1t8NOo50YrOTSQbyWyvvRC6JCmioAcNjUgl678wY/edit#gid=0",
          "mode": "url"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Página1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Wvy1t8NOo50YrOTSQbyWyvvRC6JCmioAcNjUgl678wY/edit#gid=0"
        },
        "event": "rowAdded",
        "options": {}
      },
      "id": "d365a9db-cf2d-4274-92b3-83ed81cc6c1c",
      "name": "Google Sheets Trigger",
      "type": "n8n-nodes-base.googleSheetsTrigger",
      "typeVersion": 1,
      "position": [
        480,
        200
      ],
      "credentials": {
        "googleSheetsTriggerOAuth2Api": {
          "id": "i6LpJFvbZFRQvNzB",
          "name": "testes de leads"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "https://conectawebhook.com.br/api/v1/webhook/subscriber/",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "phone",
              "value": "={{ $json.whatsapp }}"
            },
            {
              "name": "first_name",
              "value": "={{ $json.Nome }}"
            },
            {
              "name": "last_name",
              "value": "= {{ $json.Sobrenome }}"
            }
          ]
        }
      },
      "name": "Cadastrando na Audiência",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1220,
        200
      ],
      "id": "d89cd7e5-b86b-4d1e-a3ff-bd7c2c7a58c5",
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 5000,
      "credentials": {
        "httpHeaderAuth": {
          "id": "Z8gB5CQhoQFgqoYJ",
          "name": "BC - TESTES"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=https://conectawebhook.com.br/api/v1/webhook/subscriber/{{ $json[\"id\"] }}/send_flow/",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "flow",
              "value": "=3054431"
            }
          ]
        }
      },
      "name": "enviar fluxo",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1380,
        200
      ],
      "id": "191d6ecc-dd25-4dcb-883c-979e5a7f8f9f",
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 5000,
      "credentials": {
        "httpHeaderAuth": {
          "id": "Z8gB5CQhoQFgqoYJ",
          "name": "BC - TESTES"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obter a string de nome completo do nó anterior\nconst nome = items[0].json.nome;\n\n// Função para separar o nome completo em nome e sobrenome\nfunction separarNomeSobrenome(nome) {\n  // Verificar se o nome completo é uma string e não é null/undefined\n  if (typeof nome !== 'string' || nome == null) {\n    throw new Error('O nome completo deve ser uma string e não nulo.');\n  }\n\n  // Dividir o nome completo em palavras\n  const palavras = nome.trim().split(' ');\n\n  // Verificar se há mais de uma palavra\n  if (palavras.length === 0) {\n    throw new Error('O nome completo deve conter pelo menos um nome.');\n  }\n\n  // Extrair o primeiro nome\n  const primeiroNome = palavras.shift();\n\n  // Extrair o sobrenome\n  const sobrenome = palavras.length > 0 ? palavras.join(' ') : '.';\n\n  // Formatar o nome e sobrenome com a primeira letra de cada palavra em maiúscula\n  const nomeFormatado = formatarNome(primeiroNome);\n  const sobrenomeFormatado = formatarNome(sobrenome);\n\n  return {\n    nome: nomeFormatado,\n    sobrenome: sobrenomeFormatado\n  };\n}\n\nfunction formatarNome(nome) {\n  return nome\n    .toLowerCase()\n    .split(' ')\n    .map((palavra) => palavra.charAt(0).toUpperCase() + palavra.slice(1))\n    .join(' ');\n}\n\n// Separar o nome completo em nome e sobrenome\nconst resultado = separarNomeSobrenome(nome);\n\nvar whatsapp = items[0].json.telefone.replace(/\\D/g, '');\nvar ddd = whatsapp.slice(2,4);\nvar ddi = whatsapp.charAt(0);\nvar ddx = whatsapp.slice(0,2);\nvar length = whatsapp.length;\nif (length >= 12){\n  if (ddi == '+'){\n    ddi = whatsapp.slice(0,3);\n    whatsapp = parseInt(whatsapp.slice(3)).toString();\n  } else {\n    if (ddx == '55'){\n      whatsapp = parseInt(whatsapp.slice(2)).toString();\n      ddi = \"+55\";\n    } else {\n      whatsapp = parseInt(whatsapp).toString();\n      ddi = 'não informado';\n    }\n  }\n} else {\n  whatsapp = parseInt(whatsapp).toString();\n  ddi = 'não informado';\n}\n\nddd = whatsapp.slice(0,2);\nwhatsapp = whatsapp.slice(2);\nif (ddd > 28){\n  whatsapp = whatsapp.slice(-8);\n} else {\n  whatsapp = '9'+whatsapp.slice(-8);\n}\nvar whatsapp = '+55'+ddd+whatsapp;\n\n// Armazenar o nome e sobrenome nos campos desejados\nreturn {\n  json: {\n    Nome: resultado.nome,\n    Sobrenome: resultado.sobrenome,\n    NomeCompleto: resultado.nome+' '+resultado.sobrenome,\n    whatsapp\n  }\n};\n"
      },
      "id": "127194cb-a1c2-4fa3-8367-5d99f9d32a6a",
      "name": "Formatando Nome e Telefone",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1040,
        200
      ]
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "nome",
              "stringValue": "={{ $json.nome }}"
            },
            {
              "name": "telefone",
              "stringValue": "={{ $json.telefone }}"
            }
          ]
        },
        "options": {}
      },
      "id": "6c3b27b8-c593-43ca-a5ce-8c0d16c16a25",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        860,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// Assumindo que 'items' é um array com os dados da sua planilha\n\n// Criar um novo objeto para rastrear os telefones\nconst telefonesUnicos = {};\n\n// Iterar sobre cada item para preencher o objeto com telefones únicos\nfor (const item of items) {\n  const telefone = item.json.telefone;\n  // Se o telefone já foi visto, continue para o próximo item\n  if (telefonesUnicos[telefone]) continue;\n  // Caso contrário, adicione ao objeto\n  telefonesUnicos[telefone] = item;\n}\n\n// Converter o objeto de volta em um array para o output do nó\nconst itensUnicos = Object.values(telefonesUnicos);\n\nreturn itensUnicos.map(item => {\n  return { json: item.json };\n});\n"
      },
      "id": "b8fce5d0-812a-43b2-ab98-fe131539e8d1",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        200
      ]
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Google Sheets Trigger": {
      "documentId": "1Wvy1t8NOo50YrOTSQbyWyvvRC6JCmioAcNjUgl678wY",
      "sheetId": "0",
      "lastIndexChecked": 5
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T01:00:53.000Z",
  "versionId": "55fac803-ac2e-4946-9e15-98f7314d285b"
}